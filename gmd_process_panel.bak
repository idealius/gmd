# **********************************************************************
# "CPU Panel (8-core)" theme for Conky by Tony George (teejee2008@gmail.com)
#
# Webpage: http://teejeetech.blogspot.in/
# **********************************************************************
# EDITED BY IDEALIUS on github

background yes
double_buffer yes

alignment bottom_right

border_width 1
cpu_avg_samples 2
default_color white
default_outline_color white
default_shade_color white
draw_borders no
draw_graph_borders yes
draw_outline no
draw_shades no

gap_x 130
gap_y 20
net_avg_samples 2
no_buffers yes
out_to_console no
out_to_stderr no
extra_newline no

own_window yes
own_window_type normal
own_window_transparent yes
own_window_colour 000000
own_window_argb_visual no
own_window_argb_value 0
own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager

minimum_size 170 0
stippled_borders 0
update_interval 2.0
uppercase no
use_spacer none

show_graph_scale no
show_graph_range no

use_xft yes
xftalpha 0.1
xftfont Droid Sans:size=8
color0 white
color1 EAEAEA
color2 FFA300
color3 grey

TEXT
${color2}CPU 1${color0}${alignr}${cpu cpu0}%
${cpubar cpu0 3,}
${color2}CPU 2${color0}${alignr}${cpu cpu1}%
${cpubar cpu1 3,}
${execi 3 cat ./topcpu | awk 'NR==1{print $1}'} $alignr ${execi 3 cat ./topcpu | awk 'NR==1{print $2}'}%
${execi 3 cat ./topcpu | awk 'NR==2{print $1}'} $alignr ${execi 3 cat ./topcpu | awk 'NR==2{print $2}'}%
${execi 3 cat ./topcpu | awk 'NR==3{print $1}'} $alignr ${execi 3 cat ./topcpu | awk 'NR==3{print $2}'}%
${execi 3 cat ./topcpu | awk 'NR==4{print $1}'} $alignr ${execi 3 cat ./topcpu | awk 'NR==4{print $2}'}%
${execi 3 cat ./topcpu | awk 'NR==5{print $1}'} $alignr ${execi 3 cat ./topcpu | awk 'NR==5{print $2}'}%

${color2}RAM ${color0}${alignr}${mem}
${membar 3,}
${execi 3 cat ./topmem | awk 'NR==1{print $1}'} $alignr ${execi 3 cat ./topmem | awk 'NR==1{print $2}'} MB
${execi 3 cat ./topmem | awk 'NR==2{print $1}'} $alignr ${execi 3 cat ./topmem | awk 'NR==2{print $2}'} MB
${execi 3 cat ./topmem | awk 'NR==3{print $1}'} $alignr ${execi 3 cat ./topmem | awk 'NR==3{print $2}'} MB
${execi 3 cat ./topmem | awk 'NR==4{print $1}'} $alignr ${execi 3 cat ./topmem | awk 'NR==4{print $2}'} MB
${execi 3 cat ./topmem | awk 'NR==5{print $1}'} $alignr ${execi 3 cat ./topmem | awk 'NR==5{print $2}'} MB
${execi 3 top -b -n 1 > gmdcache && node ~/.conky/gmd/gmd.js ./}





-- ${execi 1 COLUMNS_CACHE=$COLUMNS & COLUMNS=200 & top -o %MEM -b -n 1 > ~/.conky/gmd/gmdcache & COLUMNS=$COLUMNS_CACHE}
-- ${execi 1 top -o %MEM -b -n 1 > ~/.conky/gmd/gmdcache}
-- ${execi 1 node ~/.conky/gmd/gmd.js ~/.conky/gmd/}
${execi 1 dirname $PWD}

${execi 5 ps axo comm,pcpu,rss | ~/.conky/gmd/consolidate.sh 2 | ~/.conky/gmd/consolidate.sh 3| sort -g -r -k2,2 > psboth}
${color2}CPU 1${color0}${alignr}${cpu cpu0}%
${cpubar cpu0 5,}
${color2}CPU 2${color0}${alignr}${cpu cpu1}%
${cpubar cpu1 5,}
${execi 5 cat ./psboth | sed -n '1,1p;2q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '1,1p;2q' | cut -d' ' -f 2}%
${execi 5 cat ./psboth | sed -n '2,2p;3q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '2,2p;3q' | cut -d' ' -f 2}%
${execi 5 cat ./psboth | sed -n '3,3p;4q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '3,3p;4q' | cut -d' ' -f 2}%
${execi 5 cat ./psboth | sed -n '4,4p;5q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '4,4p;5q' | cut -d' ' -f 2}%
${execi 5 cat ./psboth | sed -n '5,5p;6q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '5,5p;6q' | cut -d' ' -f 2}%
${execi 5 cat ./psboth | sort -g -k3,3 > psboth}
${color2}RAM ${color0}${alignr}${mem}
${membar 5,}
${execi 5 cat ./psboth | sed -n '1,1p;2q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '1,1p;2q' | cut -d' ' -f 3} MB
${execi 5 cat ./psboth | sed -n '2,2p;3q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '2,2p;3q' | cut -d' ' -f 3} MB
${execi 5 cat ./psboth | sed -n '3,3p;4q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '3,3p;4q' | cut -d' ' -f 3} MB
${execi 5 cat ./psboth | sed -n '4,4p;5q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '4,4p;5q' | cut -d' ' -f 3} MB
${execi 5 cat ./psboth | sed -n '5,5p;6q' | cut -d' ' -f 1} $alignr ${execi 5 cat ./psboth | sed -n '5,5p;6q' | cut -d' ' -f 3} MB

deprecated updates string process number labels on the fly, but it is probably slower than using a hash array
 // debug("MY FLOAT " + my_float + " SET " + c + " INDEX " + i + " DAT " + this.fc.columns[c].numeric[i])
                    //v This could be improved with a refactor for speed by using a hash
                    //update the process name in the form of a trailing '(x)' where x is the number of duplicate processes
                    //x console.log(this.fc.columns[c].my_name_data)
                    
                    // marked_for_label[c][i] = 0
                    // marked_for_label[c][dupe.index]++
                    // var length = this.fc.columns[c].my_name_data[dupe.index].length-1
                    // var dupe_length = length
                    // var name = this.fc.columns[c].my_name_data[dupe.index]
                    // var close_bracket = false
                    // var close_brk_pos = 0
                    // var open_bracket = false
                    // var open_brk_pos = 0
                    // // v str level
                    // // debug ("DUPE LENGTH:" + dupe_length +" DUPE INDEX:" + dupe.index)
                    // while (dupe_length > -1) { 
                        
                    //     if (name[dupe_length] == ')' && !close_bracket) {
                    //         close_bracket = true
                    //         close_brk_pos = dupe_length
                    //     }
                    //     if (name[dupe_length] == '(' && !open_bracket && close_bracket) { //close_bracket here prevents ')(' detection
                    //         open_bracket = true
                    //         open_brk_pos = dupe_length
                    //         break
                    //     }
                    //     dupe_length--
                    // }
                    // if (open_bracket) {            
                    //     var my_int = parseInt(name.slice(open_brk_pos+1, close_brk_pos))
                    //     my_int++
                    //     // debug(":(" + my_int + ")")
                    //     this.fc.columns[c].my_name_data[dupe.index] = name.slice(0, open_brk_pos+1) + my_int.toString() + name.slice(close_brk_pos)
                    //     //x debug(name) //x
                    //     // debug("Established dupe detected. Result:" + this.fc.columns[c].my_name_data[dupe.index])
                    // }
                    // else {
                    //     this.fc.columns[c].my_name_data[dupe.index] += ":(2)"
                    //     // debug("New dupe detected.")
                    // }




                        // if (search_str == "chrome") console.log("SUCCESS 3")
        // v Not even sure this is needed anymore
        //This double checks there's no '+' before the '('. This doesn't help for processes that have a '+' right
        //there positionally alongside a duplicate process, but with a longer filename. However, it still
        //takes care of the other edge case which is much more common - where the + is for long process filenames)
        // if (a.result) {
        //     var i = a.index 
        //     var start_pos = array_str[i].length //str level
        //     var parenth_pos = array_str[i].indexOf('(', i)
        //     start_pos = (parenth_pos > 0) ? parenth_pos : start_pos
        //     if (array_str[start_pos-1] == '+') a.result = false
        // }
        // if (search_str == "chrome" && a.result) console.log("SUCCESS 4 \n")

                        // var tail = array_str[i].slice(search_str.length)
                // // v Check that our tail doesn't have regular alpha-numeric chars besides our parentheses
                // // compare against decimal unicode table, basically if it's anything but what we use to label dupe procs it dq's the dupe
                // var tail_exception = false
                // var ii = 0
                // while (!tail_exception && ii < tail.length) {
                //     var my_char = tail.charCodeAt(ii)
                //     if (( my_char < 40) || 
                //         (my_char > 42 && my_char < 47) || 
                //         my_char > 59 ) {
                            
                //             tail_exception = true
                //             //debug("TAIL EXCEPTION", tail, tail[ii], my_char) // I NEED to move to next iteration instead of returning
                //             break

                //     }
                //     else ii++
                // }
                // // console.log ("TAIL: ", tail)
                // if (!tail_exception) {
                //     a.result = true
                //     a.index = i
                //     break
                // }

                // var columns1 = "COLUMNS_CACHE=$COLUMNS & COLUMNS=100 &"
// var top_cmd = "top -b -n 1 > " + gmd_cache_path + 'tmp'
// var columns2 = " & COLUMNS=$COLUMNS_CACHE"
// shell.spawnSync('/bin/bash', ['-c \"top -b -n 1 > ' + gmd_cache_path +'\"']);
// shell.exec('cp ' + gmd_cache_path + 'tmp ' + gmd_cache_path)